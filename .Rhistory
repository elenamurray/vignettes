type_message, "\n",
scale_message, sep = "")
# Define vertical spacing between lines (in pixels)
line_spacing <- 50
# Apply annotations one by one with spacing
vignette_img <- base_img %>%
# Line 1: Bold actor message
image_annotate(actor_message, size = 28, color = "black",
location = "+502+290",
font = "Arial Rounded MT Bold") %>%
# Line 2: Type message
image_annotate(type_message, size = 28, color = "black",
location = "+502+400",
font = "Arial") %>%
# Line 3: Scale message
image_annotate(scale_message, size = 28, color = "black",
location = "+502+650",
font = "Arial")
# Create a unique file name
file_name <- paste0(output_dir, "/", vig_id, ".png")
# Save the vignette image
image_write(vignette_img, path = file_name, format = "png")
}
message("Vignette images created successfully in: ", output_dir)
}
# Run the function
create_vignette_images(vignettes_universe)
#Function to create vignette text for each scenario
import_vignettes_content <- function(scenario = "park") {
vignettes_content_df <- read_xlsx("messages/vignettes_content.xlsx", sheet = paste0("scenario_", scenario))
vignettes_content_df$scenario <- scenario
vignettes_content_df$title_message_split <- map_chr(vignettes_content_df$title, str_wrap_string, width = 43)
vignettes_content_df$actor_message_split <- map_chr(vignettes_content_df$actor_message, str_wrap_string, width = 43)
vignettes_content_df$type_message_split <- map_chr(vignettes_content_df$type_message, str_wrap_string, width = 43)
vignettes_content_df$scale_message_split <- map_chr(vignettes_content_df$scale_message, str_wrap_string, width = 43)
vignettes_content_df$title_lines <- str_count(vignettes_content_df$title_message_split, fixed("\n")) + 1
vignettes_content_df$actor_lines <- str_count(vignettes_content_df$actor_message_split, fixed("\n")) + 1
vignettes_content_df$type_lines <- str_count(vignettes_content_df$type_message_split, fixed("\n")) + 1
vignettes_content_df$scale_lines <- str_count(vignettes_content_df$scale_message_split, fixed("\n")) + 1
vignettes_content_df$message_combination <- str_c(vignettes_content_df$scenario,
vignettes_content_df$actor,
vignettes_content_df$type,
vignettes_content_df$scale,
sep = "-")
vignettes_content_df$vig_id <- paste(scenario, "vig", seq_len(nrow(vignettes_content_df)), sep = "-")
vignettes_content_df %<>% relocate(scenario, vig_id, message_combination)
return(vignettes_content_df)
}
#Set up park vignettes
park_vignettes_text <- import_vignettes_content(scenario = "park")
#Set up stadium vignettes
stadium_vignettes_text <- import_vignettes_content(scenario = "stadium")
#Set up shopping vignettes
shopping_vignettes_text <- import_vignettes_content(scenario = "shopping")
## generate full vignette data frames ---------------------------------
vignettes_universe <- rbind.data.frame(park_vignettes_text, shopping_vignettes_text, stadium_vignettes_text)
#Save
save(park_vignettes_text, shopping_vignettes_text, stadium_vignettes_text,
vignettes_universe,
file = "vignettes/vignettes_df.RData")
load("vignettes/vignettes_df.RData")
# Function to create vignette images
create_vignette_images <- function(df, output_dir = "vignettes_images_test") {
# Create the output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# Iterate over each row in the dataframe to create images
for (i in seq_len(nrow(df))) {
# Extract row data
scenario <- df$scenario[i]
vig_id <- df$vig_id[i]
actor_message <- df$actor_message_split[i]
type_message <- df$type_message_split[i]
scale_message <- df$scale_message_split[i]
# Select the correct image for the scenario
base_img <- switch(scenario,
park = park_img,
shopping = shopping_img,
stadium = stadium_img)
# Compose the text for the vignette
vignette_text <- paste(actor_message, "\n",
type_message, "\n",
scale_message, sep = "")
# Define vertical spacing between lines (in pixels)
line_spacing <- 50
# Apply annotations one by one with spacing
vignette_img <- base_img %>%
# Line 1: Bold actor message
image_annotate(actor_message, size = 28, color = "black",
location = "+502+290",
font = "Arial Rounded MT Bold") %>%
# Line 2: Type message
image_annotate(type_message, size = 28, color = "black",
location = "+502+410",
font = "Arial") %>%
# Line 3: Scale message
image_annotate(scale_message, size = 28, color = "black",
location = "+502+650",
font = "Arial")
# Create a unique file name
file_name <- paste0(output_dir, "/", vig_id, ".png")
# Save the vignette image
image_write(vignette_img, path = file_name, format = "png")
}
message("Vignette images created successfully in: ", output_dir)
}
# Run the function
create_vignette_images(vignettes_universe)
#Function to create vignette text for each scenario
import_vignettes_content <- function(scenario = "park") {
vignettes_content_df <- read_xlsx("messages/vignettes_content.xlsx", sheet = paste0("scenario_", scenario))
vignettes_content_df$scenario <- scenario
vignettes_content_df$title_message_split <- map_chr(vignettes_content_df$title, str_wrap_string, width = 41)
vignettes_content_df$actor_message_split <- map_chr(vignettes_content_df$actor_message, str_wrap_string, width = 41)
vignettes_content_df$type_message_split <- map_chr(vignettes_content_df$type_message, str_wrap_string, width = 41)
vignettes_content_df$scale_message_split <- map_chr(vignettes_content_df$scale_message, str_wrap_string, width = 41)
vignettes_content_df$title_lines <- str_count(vignettes_content_df$title_message_split, fixed("\n")) + 1
vignettes_content_df$actor_lines <- str_count(vignettes_content_df$actor_message_split, fixed("\n")) + 1
vignettes_content_df$type_lines <- str_count(vignettes_content_df$type_message_split, fixed("\n")) + 1
vignettes_content_df$scale_lines <- str_count(vignettes_content_df$scale_message_split, fixed("\n")) + 1
vignettes_content_df$message_combination <- str_c(vignettes_content_df$scenario,
vignettes_content_df$actor,
vignettes_content_df$type,
vignettes_content_df$scale,
sep = "-")
vignettes_content_df$vig_id <- paste(scenario, "vig", seq_len(nrow(vignettes_content_df)), sep = "-")
vignettes_content_df %<>% relocate(scenario, vig_id, message_combination)
return(vignettes_content_df)
}
#Set up park vignettes
park_vignettes_text <- import_vignettes_content(scenario = "park")
#Set up stadium vignettes
stadium_vignettes_text <- import_vignettes_content(scenario = "stadium")
#Set up shopping vignettes
shopping_vignettes_text <- import_vignettes_content(scenario = "shopping")
## generate full vignette data frames ---------------------------------
vignettes_universe <- rbind.data.frame(park_vignettes_text, shopping_vignettes_text, stadium_vignettes_text)
#Save
save(park_vignettes_text, shopping_vignettes_text, stadium_vignettes_text,
vignettes_universe,
file = "vignettes/vignettes_df.RData")
load("vignettes/vignettes_df.RData")
create_vignette_images <- function(df, output_dir = "vignettes_images_test") {
# Create the output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# Iterate over each row in the dataframe to create images
for (i in seq_len(nrow(df))) {
# Extract row data
scenario <- df$scenario[i]
vig_id <- df$vig_id[i]
actor_message <- df$actor_message_split[i]
type_message <- df$type_message_split[i]
scale_message <- df$scale_message_split[i]
# Select the correct image for the scenario
base_img <- switch(scenario,
park = park_img,
shopping = shopping_img,
stadium = stadium_img)
# Compose the text for the vignette
vignette_text <- paste(actor_message, "\n",
type_message, "\n",
scale_message, sep = "")
# Define vertical spacing between lines (in pixels)
line_spacing <- 50
# Apply annotations one by one with spacing
vignette_img <- base_img %>%
# Line 1: Bold actor message
image_annotate(actor_message, size = 28, color = "black",
location = "+502+290",
font = "Arial Rounded MT Bold") %>%
# Line 2: Type message
image_annotate(type_message, size = 28, color = "black",
location = "+502+410",
font = "Arial") %>%
# Line 3: Scale message
image_annotate(scale_message, size = 28, color = "black",
location = "+502+650",
font = "Arial")
# Create a unique file name
file_name <- paste0(output_dir, "/", vig_id, ".png")
# Save the vignette image
image_write(vignette_img, path = file_name, format = "png")
}
message("Vignette images created successfully in: ", output_dir)
}
# Run the function
create_vignette_images(vignettes_universe)
#Function to create vignette text for each scenario
import_vignettes_content <- function(scenario = "park") {
vignettes_content_df <- read_xlsx("messages/vignettes_content.xlsx", sheet = paste0("scenario_", scenario))
vignettes_content_df$scenario <- scenario
vignettes_content_df$title_message_split <- map_chr(vignettes_content_df$title, str_wrap_string, width = 40)
vignettes_content_df$actor_message_split <- map_chr(vignettes_content_df$actor_message, str_wrap_string, width = 40)
vignettes_content_df$type_message_split <- map_chr(vignettes_content_df$type_message, str_wrap_string, width = 42)
vignettes_content_df$scale_message_split <- map_chr(vignettes_content_df$scale_message, str_wrap_string, width = 42)
vignettes_content_df$title_lines <- str_count(vignettes_content_df$title_message_split, fixed("\n")) + 1
vignettes_content_df$actor_lines <- str_count(vignettes_content_df$actor_message_split, fixed("\n")) + 1
vignettes_content_df$type_lines <- str_count(vignettes_content_df$type_message_split, fixed("\n")) + 1
vignettes_content_df$scale_lines <- str_count(vignettes_content_df$scale_message_split, fixed("\n")) + 1
vignettes_content_df$message_combination <- str_c(vignettes_content_df$scenario,
vignettes_content_df$actor,
vignettes_content_df$type,
vignettes_content_df$scale,
sep = "-")
vignettes_content_df$vig_id <- paste(scenario, "vig", seq_len(nrow(vignettes_content_df)), sep = "-")
vignettes_content_df %<>% relocate(scenario, vig_id, message_combination)
return(vignettes_content_df)
}
#Set up park vignettes
park_vignettes_text <- import_vignettes_content(scenario = "park")
#Set up stadium vignettes
stadium_vignettes_text <- import_vignettes_content(scenario = "stadium")
#Set up shopping vignettes
shopping_vignettes_text <- import_vignettes_content(scenario = "shopping")
## generate full vignette data frames ---------------------------------
vignettes_universe <- rbind.data.frame(park_vignettes_text, shopping_vignettes_text, stadium_vignettes_text)
#Save
save(park_vignettes_text, shopping_vignettes_text, stadium_vignettes_text,
vignettes_universe,
file = "vignettes/vignettes_df.RData")
load("vignettes/vignettes_df.RData")
create_vignette_images <- function(df, output_dir = "vignettes_images_test") {
# Create the output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# Iterate over each row in the dataframe to create images
for (i in seq_len(nrow(df))) {
# Extract row data
scenario <- df$scenario[i]
vig_id <- df$vig_id[i]
actor_message <- df$actor_message_split[i]
type_message <- df$type_message_split[i]
scale_message <- df$scale_message_split[i]
# Select the correct image for the scenario
base_img <- switch(scenario,
park = park_img,
shopping = shopping_img,
stadium = stadium_img)
# Compose the text for the vignette
vignette_text <- paste(actor_message, "\n",
type_message, "\n",
scale_message, sep = "")
# Define vertical spacing between lines (in pixels)
line_spacing <- 50
# Apply annotations one by one with spacing
vignette_img <- base_img %>%
# Line 1: Bold actor message
image_annotate(actor_message, size = 28, color = "black",
location = "+502+290",
font = "Arial Rounded MT Bold") %>%
# Line 2: Type message
image_annotate(type_message, size = 28, color = "black",
location = "+502+410",
font = "Arial") %>%
# Line 3: Scale message
image_annotate(scale_message, size = 28, color = "black",
location = "+502+650",
font = "Arial")
# Create a unique file name
file_name <- paste0(output_dir, "/", vig_id, ".png")
# Save the vignette image
image_write(vignette_img, path = file_name, format = "png")
}
message("Vignette images created successfully in: ", output_dir)
}
# Run the function
create_vignette_images(vignettes_universe)
library(tidyverse)
library(magrittr)
library(readxl)
library(writexl)
library(janitor)
library(magick)
library(summarytools)
library(ragg)
library(magick)
library(dplyr)
library(writexl)
park_img <- image_read("images/park.png")
shopping_img <- image_read("images/shopping.png")
stadium_img <- image_read("images/stadium.png")
load("vignettes/vignettes_df.RData")
create_vignette_images <- function(df, output_dir = "vignettes_images_test") {
# Create the output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# Iterate over each row in the dataframe to create images
for (i in seq_len(nrow(df))) {
# Extract row data
scenario <- df$scenario[i]
vig_id <- df$vig_id[i]
actor_message <- df$actor_message_split[i]
type_message <- df$type_message_split[i]
scale_message <- df$scale_message_split[i]
# Select the correct image for the scenario
base_img <- switch(scenario,
park = park_img,
shopping = shopping_img,
stadium = stadium_img)
# Compose the text for the vignette
vignette_text <- paste(actor_message, "\n",
type_message, "\n",
scale_message, sep = "")
# Define vertical spacing between lines (in pixels)
line_spacing <- 50
# Apply annotations one by one with spacing
vignette_img <- base_img %>%
# Line 1: Bold actor message
image_annotate(actor_message, size = 28, color = "black",
location = "+502+290",
font = "Arial Rounded MT Bold") %>%
# Line 2: Type message
image_annotate(type_message, size = 28, color = "black",
location = "+502+410",
font = "Arial") %>%
# Line 3: Scale message
image_annotate(scale_message, size = 28, color = "black",
location = "+502+650",
font = "Arial")
# Create a unique file name
file_name <- paste0(output_dir, "/", vig_id, ".png")
# Save the vignette image
image_write(vignette_img, path = file_name, format = "png")
}
message("Vignette images created successfully in: ", output_dir)
}
# Run the function
create_vignette_images(vignettes_universe)
#Add text to images
# Function to create vignette images
create_vignette_images <- function(df, output_dir = "vignettes_images") {
# Create the output directory if it doesn't exist
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# Iterate over each row in the dataframe to create images
for (i in seq_len(nrow(df))) {
# Extract row data
scenario <- df$scenario[i]
vig_id <- df$vig_id[i]
actor_message <- df$actor_message_split[i]
type_message <- df$type_message_split[i]
scale_message <- df$scale_message_split[i]
# Select the correct image for the scenario
base_img <- switch(scenario,
park = park_img,
shopping = shopping_img,
stadium = stadium_img)
# Compose the text for the vignette
vignette_text <- paste(actor_message, "\n",
type_message, "\n",
scale_message, sep = "")
# Define vertical spacing between lines (in pixels)
line_spacing <- 50
# Apply annotations one by one with spacing
vignette_img <- base_img %>%
# Line 1: Bold actor message
image_annotate(actor_message, size = 28, color = "black",
location = "+502+290",
font = "Arial Rounded MT Bold") %>%
# Line 2: Type message
image_annotate(type_message, size = 28, color = "black",
location = "+502+410",
font = "Arial") %>%
# Line 3: Scale message
image_annotate(scale_message, size = 28, color = "black",
location = "+502+650",
font = "Arial")
# Create a unique file name
file_name <- paste0(output_dir, "/", vig_id, ".png")
# Save the vignette image
image_write(vignette_img, path = file_name, format = "png")
}
message("Vignette images created successfully in: ", output_dir)
}
# Run the function
create_vignette_images(vignettes_universe)
View(vignettes_universe)
park_vignettes <- vignettes_universe %>% filter(scenario == "park") %>% pull(vig_id)
shopping_vignettes <- vignettes_universe %>% filter(scenario == "shopping") %>% pull(vig_id)
stadium_vignettes <- vignettes_universe %>% filter(scenario == "stadium") %>% pull(vig_id)
deck_combinations <- expand.grid(
park = park_vignettes,
shopping = shopping_vignettes,
stadium = stadium_vignettes,
stringsAsFactors = FALSE
)
# Generate image paths and Qualtrics links
generate_link <- function(scenario, vig_id) {
paste0("https://github.com/elenamurray/vignettes/blob/main/vignettes_images", "/", vig_id, ".png")
}
generate_link <- function(scenario, vig_id) {
paste0("https://raw.githubusercontent.com/elenamurray/vignettes/refs/heads/main/vignettes_images", "/", vig_id, ".png")
}
#Create deck combos for qualtrics
deck_combinations <- deck_combinations %>%
mutate(
park_image = paste0(park, ".jpg"),
shopping_image = paste0(shopping, ".jpg"),
stadium_image = paste0(stadium, ".jpg"),
park_link = generate_link("park", park),
shopping_link = generate_link("shopping", shopping),
stadium_link = generate_link("stadium", stadium),
deck_id = paste0("deck_", row_number())
)
View(deck_combinations)
#Create deck combos for qualtrics
deck_combinations <- deck_combinations %>%
mutate(
park_image = paste0(park, ".png"),
shopping_image = paste0(shopping, ".png"),
stadium_image = paste0(stadium, ".png"),
park_link = generate_link("park", park),
shopping_link = generate_link("shopping", shopping),
stadium_link = generate_link("stadium", stadium),
deck_id = paste0("deck_", row_number())
)
deck_combinations <- deck_combinations %>%
select(deck_id, park, park_image, park_link, shopping, shopping_image, shopping_link, stadium, stadium_image, stadium_link)
View(deck_combinations)
qualtrics_links_df <- deck_combinations %>%
select(park_link, shopping_link, stadium_link) %>%
rename(
`vig_1 (link)` = park_link,
`vig_2 (link)` = shopping_link,
`vig_3 (link)` = stadium_link
)
View(qualtrics_links_df)
# Save the transformed dataframe to Excel
#export
write_xlsx(qualtrics_links_df, "vignettes/deck_vignette_list.xlsx")
#shorter test version
write_xlsx(head(qualtrics_links_df, 150), "vignettes/deck_vignette_list_150.xlsx")
generate_link <- function(scenario, vig_id) {
paste0("https://github.com/elenamurray/vignettes/blob/main/vignettes_images", "/", vig_id, ".png")
}
deck_combinations <- deck_combinations %>%
mutate(
park_image = paste0(park, ".png"),
shopping_image = paste0(shopping, ".png"),
stadium_image = paste0(stadium, ".png"),
park_link = generate_link("park", park),
shopping_link = generate_link("shopping", shopping),
stadium_link = generate_link("stadium", stadium),
deck_id = paste0("deck_", row_number())
)
deck_combinations <- deck_combinations %>%
select(deck_id, park, park_image, park_link, shopping, shopping_image, shopping_link, stadium, stadium_image, stadium_link)
qualtrics_links_df <- deck_combinations %>%
select(park_link, shopping_link, stadium_link) %>%
rename(
`vig_1 (link)` = park_link,
`vig_2 (link)` = shopping_link,
`vig_3 (link)` = stadium_link
)
# Save the transformed dataframe to Excel
#export
write_xlsx(qualtrics_links_df, "vignettes/deck_vignette_list.xlsx")
#shorter test version
write_xlsx(head(qualtrics_links_df, 150), "vignettes/deck_vignette_list_150.xlsx")
View(deck_combinations)
View(shopping_vignettes_text)
View(vignettes_universe)
View(deck_combinations)
View(deck_combinations)
View(qualtrics_links_df)
View(vignettes_universe)
vigs_clean <- vignettes_universe %>%
select(vig_id, actor, type, scale) %>%
rename(vignette_id = vig_id)
View(vigs_clean)
decks_long <- deck_combinations %>%
pivot_longer(cols = c(park, shopping, stadium),
names_to = "setting",
values_to = "vignette_id")
View(decks_long)
decks_with_attrs <- decks_long %>%
left_join(vigs_clean, by = "vignette_id") %>%
mutate(setting = paste0(setting, "_"))  # so we can prefix columns
View(decks_with_attrs)
design_matrix <- decks_with_attrs %>%
pivot_wider(
id_cols = deck_id,
names_from = setting,
values_from = c(vignette_id, actor, type, scale),
names_glue = "{setting}{.value}"
)
View(design_matrix)
design_matrix <- decks_with_attrs %>%
pivot_wider(
id_cols = deck_id,
names_from = setting,
values_from = c(vignette_id, actor, type, scale),
names_glue = "{setting}{.value}"
) %>%
select(deck_id, park_vignette_id, park_actor, park_type, park_scale, shopping_vignette_id, shopping_actor, shopping_type, shopping_scale, stadium_vignette_id, stadium_actor, stadium_type, stadium_scale)
design_matrix_coded <- design_matrix %>%
mutate(across(where(is.character), ~ as.numeric(as.factor(.)))) %>%
select(-starts_with("vignette_id"))  # remove IDs for efficiency calc
View(design_matrix_coded)
set.seed(42)
d_opt <- optFederov(
data = design_matrix_coded %>% select(-deck_id),
nTrials = 150,
criterion = "D"
)
selected_decks <- design_matrix[d_opt$rows, ]  # original (uncoded) rows
